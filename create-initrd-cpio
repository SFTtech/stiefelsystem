#!/usr/bin/env python3
import argparse
import os

from config import CONFIG as cfg
from util import (
    command,
    ensure_root,
    list_files_in_packages,
)

ensure_root()
cli = argparse.ArgumentParser()
cli.add_argument('--out', default=cfg.path.cpio)
cli.add_argument('--compressor', default=cfg.packing.compressor)
args = cli.parse_args()

paths_to_exclude = set(
    list_files_in_packages(cfg.packing.exclude_packages, cfg.path.initrd)
)
paths_to_exclude.update(
    path.encode() for path in cfg.packing.exclude_paths
)

old_cwd = os.getcwd()
os.chdir(cfg.path.initrd)

target_files = []

def scan_path(path):
    for name in os.listdir(path):
        full = os.path.normpath(os.path.join(path, name))

        if full in paths_to_exclude:
            continue
        if full.endswith(b'__pycache__'):
            continue

        yield full
        # recurse into directories (don't follow links)
        if os.path.isdir(full) and not os.path.islink(full):
            yield from scan_path(full)

print(f'packing {cfg.path.initrd}')

archive = command(
    "bsdcpio", "-0", "-o", "-H", "newc",
    stdin=b'\0'.join(scan_path(b'.')) + b'\0',
    capture_stdout=True,
    env={"LANG": "C"},
)

os.chdir(old_cwd)
del old_cwd

print(f"uncompressed CPIO: {len(archive)} bytes")

compressed = command(
    f"pv -s {len(archive)} | {args.compressor}",
    shell=True,
    stdin=archive,
    capture_stdout=True
)
print(f"compressed CPIO: {len(compressed)} bytes")

with open(args.out, "wb") as cpiofile:
    cpiofile.write(compressed)
