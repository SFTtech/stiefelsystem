#!/usr/bin/python3 -u
import base64
import hmac
import multiprocessing
import json
import os
import shlex
import socket
import subprocess

import pyudev

if os.path.exists('/sys/class/net/stiefellink'):
    print('skipping stiefel-autokexec because this is already a '
          'stiefeled system')
    raise SystemExit(0)

with open('/etc/stiefelsystem/config.json') as cfg_fileobj:
    config = json.load(cfg_fileobj)

def command(*cmd):
    print(f'$ {" ".join(shlex.quote(part) for part in cmd)}')
    subprocess.call(cmd)

def do_kexec():
    print(f'booting into stiefelsystem server')

    cmdline = [
        f'systemd.unit=stiefel-server.service',
        f'stiefel_bootdisk={config["bootdisk"]}',
        f'stiefel_bootpart={config["bootpart"]}',
    ]
    cmdline.extend(config.get("cmdline", []))

    bootpart_luks = config.get("bootpart-luks")
    if bootpart_luks is not None:
        cmdline.append(
            f'stiefel_bootpart_luks={bootpart_luks}'
        )

    command(
        'kexec',
        config['stiefelsystem-kernel'],
        '--ramdisk=' + config['stiefelsystem-initrd'],
        '--reset-vga',
        '--console-vga',
        '--command-line=' + ' '.join(cmdline)
    )

def kexec_on_adapter_found(adapters):
    print('waiting for one of these adapters:')
    for mac in adapters:
        print(f'  {mac}')

    context = pyudev.Context()
    udev_monitor = pyudev.Monitor.from_netlink(context)
    udev_monitor.filter_by(subsystem='net')
    while True:
        # test if we have the adapter now
        for netif in os.listdir('/sys/class/net'):
            with open(f'/sys/class/net/{netif}/address') as addrfile:
                mac = addrfile.read().strip()
                if mac in adapters:
                    print(f"adapter found: {mac}")
                    do_kexec()

        # wait until something happens
        udev_monitor.poll()


def kexec_on_server_discovery_message(aes_key_hash, hmac_key):
    discovery_port = 61570  # determined by random.choice(range(49152, 2**16))
    nameinfo_flags = socket.NI_NUMERICHOST

    challenge = base64.b64encode(os.urandom(16))

    sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(('', discovery_port))
    # allow multicast loopback for development
    sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)

    print("kexec-on-server-discovery-message: listening for messages")
    while True:
        data, addr = sock.recvfrom(1024)
        if data == b'stiefelsystem:discovery:find-server:' + aes_key_hash:
            host, _ = socket.getnameinfo(addr, nameinfo_flags)
            print(f"{host!r} is looking for a stiefelsystem server! challenging it...")
            try:
                sock.sendto(
                    b'stiefelsystem:discovery:autokexec-hello:' + aes_key_hash +
                    b':' + challenge, addr
                )
            except BaseException as exc:
                print(f"cannot send discovery reply: {exc!r}")
        elif data.startswith(b'stiefelsystem:discovery:autokexec-reboot:' + aes_key_hash + b':'):
            response = data.split(b':')[-1]
            if hmac.compare_digest(
                response,
                hmac.new(hmac_key, challenge, digestmod='sha256').hexdigest().encode()
            ):
                # this reboot request is authentic, it solved our challenge
                do_kexec()
            else:
                print(f'bad HMAC signature for autokexec-reboot challenge')

multiprocessing.Process(
    target=kexec_on_server_discovery_message,
    args=(config['aes-key-hash'].encode(), config['hmac-key'].encode())
).start()

kexec_on_adapter_found(config['autokexec-triggers']['adapters'])
