#!/usr/bin/python3 -u
import base64
import json
import os
import shlex
import subprocess

import pyudev

if os.path.exists('/sys/class/net/stiefellink'):
    print('skipping stiefel-autokexec because this is already a '
          'stiefeled system')
    raise SystemExit(0)

with open('/etc/stiefelsystem-config.json') as cfg_fileobj:
    config = json.load(cfg_fileobj)

macs = config['srv-macs']
mac_set = set(macs)

context = pyudev.Context()
udev_monitor = pyudev.Monitor.from_netlink(context)
udev_monitor.filter_by(subsystem='net')

def command(*cmd):
    print(f'$ {" ".join(shlex.quote(part) for part in cmd)}')
    subprocess.call(cmd)

print('waiting for one of the stiefelsystem network interfaces:')
for mac in macs:
    print(f'  {mac}')

while True:
    for netif in os.listdir('/sys/class/net'):
        with open(f'/sys/class/net/{netif}/address') as addrfile:
            mac = addrfile.read().strip()
            if mac in mac_set:
                cmdline = [
                    f'systemd.unit=stiefel-server.service',
                    f'stiefel_srvip={config["srv-ip"]}',
                    f'stiefel_srvmacs={",".join(macs)}',
                    f'stiefel_bootdisk={config["bootdisk"]}',
                    f'stiefel_bootpart={config["bootpart"]}',
                    f'stiefel_kernel={config["kernel"]}',
                    f'stiefel_initrd={config["initrd"]}',
                ]

                print(f'adapter found: {mac}')
                print(f'activating stiefelsystem to boot server!')

                command(
                    'kexec',
                    config['stiefelsystem-kernel'],
                    '--ramdisk=' + config['stiefelsystem-initrd'],
                    '--command-line=' + ' '.join(cmdline)
                )

    # wait until something happens with network devices
    udev_monitor.poll()
