#!/usr/bin/python3 -u
import base64
import hashlib
import io
import json
import os
import socket
import struct
import subprocess
import sys
import tarfile
import time
import urllib.request

import Cryptodome.Cipher.AES

print(f"reading config from kernel cmdline")

with open('/proc/cmdline') as cmdlinefile:
    cmdline = cmdlinefile.read()
cmdlineargs = {}
for entry in cmdline.strip().split():
    try:
        key, value = entry.split('=', maxsplit=1)
        cmdlineargs[key] = value
    except ValueError:
        continue

INNER_CMDLINE = base64.b64decode(cmdlineargs["stiefel_innercmdline"]).decode()

print(f"config: {cmdlineargs}")

with open('/aes-key', 'rb') as keyfile:
    KEY = keyfile.read()
KEY_HASH = hashlib.sha256(KEY).hexdigest().encode()

# server discovery loop
DISCOVERY_PORT = 61570
NAMEINFO_FLAGS = socket.NI_NUMERICHOST
sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM)
SERVER = None
while SERVER is None:
    # set interfaces up and send discovery messages
    for netdev in os.listdir('/sys/class/net'):
        try:
            with open(f'/sys/class/net/{netdev}/operstate') as state_file:
                state = state_file.read().strip()

            if state == 'down':
                print(f"setting link up: {netdev!r}")
                subprocess.check_call(['ip', 'link', 'set', 'up', netdev])
            elif state == 'up':
                with open(f'/sys/class/net/{netdev}/ifindex') as index_file:
                    idx = int(index_file.read().strip())

                print(f"broadcasting stiefelsystem discovery message to {netdev!r}")

                sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_IF, idx)
                sock.sendto(
                    b"stiefelsystem:discovery:find-server:" + KEY_HASH,
                    (f"ff02::1", DISCOVERY_PORT)
                )
        except BaseException as exc:
            print(f'problem with link {netdev!r}: {exc!r}')

    # receive replies
    timeout = time.monotonic() + 1.0
    while True:
        remaining = timeout - time.monotonic()
        if remaining <= 0:
            break
        sock.settimeout(remaining)
        try:
            data, addr = sock.recvfrom(1024)
        except socket.timeout:
            break
        if data != b"stiefelsystem:discovery:server-hello:" + KEY_HASH:
            continue

        host, _ = socket.getnameinfo(addr, NAMEINFO_FLAGS)

        SERVER_INTERFACE = host.split('%')[1]
        with open(f'/sys/class/net/{SERVER_INTERFACE}/address') as mac_file:
            SERVER_INTERFACE_MAC = mac_file.read().strip()

        try:
            # test if we can talk to the server on HTTP
            SERVER_HTTP_URL = f"http://[{host.replace('%', '%25')}]"
            print(f'fetching {SERVER_HTTP_URL}')
            request = urllib.request.urlopen(SERVER_HTTP_URL, timeout=1)
            meta = json.loads(request.read().decode('utf-8'))
            if meta['what'] != 'stiefelsystem-server':
                raise ValueError("not a stiefelsystem server!")
            SERVER_CHALLENGE = meta['challenge']
            if meta['key-hash'] != KEY_HASH.decode():
                raise ValueError("wrong key hash")
            SERVER = host
            break
        except BaseException as exc:
            print(f"server is broken: {exc!r}")

challenge = base64.b64encode(os.urandom(16)).decode()
print(f'fetching {SERVER_HTTP_URL}/boot.tar.aes?challenge={challenge}')
blob = urllib.request.urlopen(f'{SERVER_HTTP_URL}/boot.tar.aes?challenge={challenge}').read()
if len(blob) < 32:
    raise ValueError("corrupted boot.tar.aes")
nonce = blob[:16]
ciphertext = blob[16:-16]
mac = blob[-16:]

cipher = Cryptodome.Cipher.AES.new(KEY, Cryptodome.Cipher.AES.MODE_EAX, nonce=nonce, mac_len=16)
print('decrypting boot.tar.aes')
tar_blob = cipher.decrypt_and_verify(ciphertext, mac)
del nonce, ciphertext, mac
print('decryption done')

with io.BytesIO(tar_blob) as tarfileobj:
    with tarfile.open(fileobj=tarfileobj, mode='r') as tar:
        # validate challenge response
        with tar.extractfile(tar.getmember('challenge')) as fileobj:
            challenge_response = fileobj.read().decode()
            expected_response = f'/boot.tar.aes?challenge={challenge}'
            if challenge_response != expected_response:
                print(f"challenge response: {challenge_response}")
                print(f"expected response: {expected_response}")
                raise ValueError('bad challenge response - replay attack?')
        # extract this tar file
        for member in tar.getmembers():
            with tar.extractfile(member) as fileobj:
                data = fileobj.read()
            print(f'    {member.name}: {len(data)} bytes')
            if member.name != 'challenge':
                with open(f'/{member.name}', 'wb') as fileobj:
                    fileobj.write(data)

CMDLINE = (
    INNER_CMDLINE +
    " stiefel_nbdhost=" + SERVER.replace(SERVER_INTERFACE, "stiefellink") +
    " stiefel_nbdname=stiefelblock" +  # name is hardcoded in stiefel-server
    " stiefel_link=" + SERVER_INTERFACE_MAC
)

print(f"booting into new kernel, cmdline={CMDLINE!r}")

subprocess.check_call(['kexec', '/kernel', '--ramdisk=/initrd', '--command-line=' + CMDLINE])
