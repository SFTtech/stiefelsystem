#!/usr/bin/python3 -u
import base64
import hashlib
import http.server
import io
import json
import multiprocessing
import os
import re
import socket
import subprocess
import struct
import tarfile
import time
import traceback

import Cryptodome.Cipher.AES

# automatically turn the display off to save power
subprocess.check_call(['setterm', '--powerdown', '1', '--blank', '1'])

# read config from kernel cmdline
print(f"reading config from kernel cmdline")

with open('/proc/cmdline') as cmdlinefile:
    cmdline = cmdlinefile.read()
cmdlineargs = {}
for entry in cmdline.strip().split():
    try:
        key, value = entry.split('=', maxsplit=1)
        cmdlineargs[key] = value
    except ValueError:
        continue

print(f"config: {cmdlineargs}")

with open("/aes-key", "rb") as keyfile:
    KEY = keyfile.read()
KEY_HASH = hashlib.sha256(KEY).hexdigest().encode()


def discovery_server():
    """
    listens for and responds to discovery multicast messages,
    thus providing its IP to interested clients.

    designed to be run in a multiprocessing subprocess.
    """
    discovery_port = 61570  # determined by random.choice(range(49152, 2**16))
    nameinfo_flags = socket.NI_NUMERICHOST

    sock = socket.socket(socket.AF_INET6, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.bind(('', discovery_port))
    # allow multicast loopback for development
    sock.setsockopt(socket.IPPROTO_IPV6, socket.IPV6_MULTICAST_LOOP, True)

    print("discovery server: listening for packets")
    while True:
        data, addr = sock.recvfrom(1024)
        if data != b'stiefelsystem:discovery:find-server:' + KEY_HASH:
            continue
        host, _ = socket.getnameinfo(addr, nameinfo_flags)
        print(f"{host!r} is looking for us")
        try:
            sock.sendto(b'stiefelsystem:discovery:server-hello:' + KEY_HASH, addr)
        except BaseException as exc:
            print(f"cannot send discovery reply: {exc!r}")


def continuous_network_setup():
    """
    continuously enables all network interfaces as they become available.

    designed to be run in a multiprocessing subprocess.
    """
    print('running continuous network setup')
    while True:
        for netdev in os.listdir('/sys/class/net'):
            with open(f'/sys/class/net/{netdev}/operstate') as state_file:
                if state_file.read().strip() != 'down':
                    continue
            print(f"setting link up: {netdev!r}")
            try:
                subprocess.check_call(['ip', 'link', 'set', 'up', netdev])
            except BaseException as exc:
                print(f"could not set link up: {exc!r}")

        # instead of time.sleep(), we could use udev like in stiefel-autokexec
        time.sleep(0.5 * 20)


# challenge for clients to prevent replay attacks
CHALLENGE = base64.b64encode(os.urandom(16)).decode('ascii')

BLKDEV = cmdlineargs["stiefel_bootdisk"]
BOOTPART = cmdlineargs["stiefel_bootpart"]
UNSECURE = bool(int(cmdlineargs.get("stiefel_unsecure", "0")))

multiprocessing.Process(target=continuous_network_setup).start()
multiprocessing.Process(target=discovery_server).start()

# create NBD config
with open("/etc/nbd-server/config", "w") as nbdconfigfile:
    nbdconfigfile.write(
        f"""
        [generic]
        [stiefelblock]
        exportname = {BLKDEV}
        copyonwrite = false
        """
    )

# open NBD server
print(f"opening NBD server for {BLKDEV}")
subprocess.check_call(['systemctl', 'start', 'nbd-server'])

def read_binary(filename):
    if not os.path.isfile(filename):
        return None
    with open(filename, 'rb') as fileobj:
        return fileobj.read()


def find_kernel_and_initrd():
    # kernel hints were manually created for the stiefelsystem
    stiefelsystem_config = read_binary("/mnt/stiefelsystem.json")
    if stiefelsystem_config is not None:
        stiefelsystem_config_json = json.loads(stiefelsystem_config)
        yield os.path.normpath(
            b'/mnt/' + stiefelsystem_config_json['kernel'].encode('utf-8')
        )
        yield os.path.normpath(
            b'/mnt/' + stiefelsystem_config_json['initrd'].encode('utf-8')
        )
        return

    # try to determine kernel from syslinux config
    syslinux_config = read_binary("/mnt/syslinux/syslinux.cfg")
    if syslinux_config is not None:
        yield os.path.normpath(os.path.join(
            b'/mnt/syslinux',
            re.search(rb'^\s*LINUX\s+(\S+)\s', syslinux_config, re.M).group(1)
        ))
        yield os.path.normpath(os.path.join(
            b'/mnt/syslinux',
            re.search(rb'^\s*INITRD\s+(\S+)\s', syslinux_config, re.M).group(1)
        ))
        return

    # try to determine kernel from grub config
    grub_config = read_binary("/mnt/grub/grub.cfg")
    if grub_config is not None:
        yield os.path.normpath(
            b'/mnt/' +
            re.search(rb'^\s*linux\s+(\S+)\s', grub_config, re.M).group(1)
        )
        yield os.path.normpath(
            b'/mnt/' +
            re.search(rb'^\s*initrd\s+(\S+)\s', grub_config, re.M).group(1)
        )
        return


def get_boot_tar(challenge):
    print("reading kernel and initrd")
    try:
        subprocess.check_call(['mount', '-oro', BOOTPART, '/mnt'])
        kernel, initrd = find_kernel_and_initrd()
        print(f"kernel: {kernel.decode(errors='replace')!r}")
        kernelblob = read_binary(kernel)
        print(f"initrd: {initrd.decode(errors='replace')!r}")
        initrdblob = read_binary(initrd)
    finally:
        subprocess.check_call(['umount', '/mnt'])

    # create the response TAR in-memory
    with io.BytesIO() as fileobj:
        with tarfile.open(fileobj=fileobj, mode='w') as tar:
            tf = tarfile.TarInfo('kernel')
            tf.size = len(kernelblob)
            tar.addfile(tf, io.BytesIO(kernelblob))
            tf = tarfile.TarInfo('initrd')
            tf.size = len(initrdblob)
            tar.addfile(tf, io.BytesIO(initrdblob))
            tf = tarfile.TarInfo('challenge')
            tf.size = len(challenge)
            tar.addfile(tf, io.BytesIO(challenge))
        fileobj.seek(0)
        return fileobj.read()

# run HTTP server
def handle_request(path):
    if path == '/':
        return 200, json.dumps({
            "what": "stiefelsystem-server",
            "args": cmdlineargs,
            "key-hash": KEY_HASH.decode(),
            "challenge": CHALLENGE,
        }) + '\n'
    elif path == '/boot.tar':
        if UNSECURE:
            return 200, get_boot_tar(b'')
        else:
            return 403, "only boot.tar.aes is available"
    elif path.startswith('/boot.tar.aes?challenge='):
        # the client shall supply a random challenge to prevent replay
        # attacks that would cause the boot of an older kernel/initrd.
        plaintext = get_boot_tar(challenge=path.encode('utf-8'))
        nonce_gen = hashlib.sha256(plaintext)  # recommended by djb lol
        nonce_gen.update(os.urandom(16))
        nonce = nonce_gen.digest()[:16]
        cipher = Cryptodome.Cipher.AES.new(
            KEY,
            Cryptodome.Cipher.AES.MODE_EAX,
            nonce=nonce,
            mac_len=16
        )
        print('encrypting boot.tar.aes')
        ciphertext, mac = cipher.encrypt_and_digest(plaintext)
        print('encryption done')
        if len(mac) != 16:
            raise ValueError('bad MAC length')
        del plaintext
        return 200, nonce + ciphertext + mac
    else:
        return 404, f"404: {path}"

class RequestHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        try:
            code, message = handle_request(self.path)
        except Exception as exc:
            traceback.print_exc()
            code, message = 503, f"internal server error: {exc}"

        if isinstance(message, str):
            print(f"sending text reply: {message!r}")
            message = message.encode('utf-8')
            content_type = "text/plain; charset=utf-8"
        else:
            print(f"sending binary reply: {len(message)} bytes")
            content_type = "application/x-binary"

        self.protocol_version = "HTTP/1.1"
        self.send_response(code)
        self.send_header("Content-Length", len(message))
        self.send_header("Content-Type", content_type)
        self.end_headers()

        self.wfile.write(message)

class HTTPServerIPv6(http.server.HTTPServer):
    address_family = socket.AF_INET6

print("running HTTP server")

HTTPServerIPv6(('::', 80), RequestHandler).serve_forever()
