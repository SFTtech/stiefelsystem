#!/usr/bin/env python3
"""
script to create the usb flash drive for booting the client
"""
import argparse
import base64
import os
import tempfile

from config import CONFIG as cfg
from util import (
    command,
    ensure_root,
    get_consent,
    warn,
)

ensure_root()
cli = argparse.ArgumentParser()
cli.add_argument('blockdev')
args = cli.parse_args()

command('lsblk')

if not os.path.exists(args.blockdev):
    args.error(f'block device does not exist: {args.blockdev!r}')

partition = f'{args.blockdev}1'

warn(f'wiping entire drive at {args.blockdev!r} to create {partition!r}')

if not get_consent():
    raise SystemExit(1)

# create partition table and write MBR
command('sfdisk', args.blockdev, stdin="label: dos\n2048,1638400,c,*\n")
command('dd', 'if=/usr/lib/syslinux/bios/mbr.bin', 'of=' + args.blockdev)
# create filesystem
command('mkfs.vfat', '-F', '16', partition)
# install bootloader
command('syslinux', partition)

# mount the filesystem and create the files on it
with tempfile.TemporaryDirectory() as tmpdir:
    command('mount', partition, tmpdir)
    try:
        command(
            'dd',
            'bs=1M',
            'if=' + os.path.join(cfg.path.work, 'initrd.cpio'),
            'of=' + os.path.join(tmpdir, 'initrd'),
            'oflag=direct',
            'status=progress',
        )
        command(
            'dd',
            'bs=1M',
            'if=' + os.path.join(cfg.path.initrd, 'vmlinuz'),
            'of=' + os.path.join(tmpdir, 'kernel'),
            'oflag=direct',
            'status=progress',
        )

        inner_cmdline = " ".join(cfg.boot.cmdline).encode()

        cmdline = " ".join([
            # the client system shouldn't modeset.
            # if it modesets, then the early boot steps of the actual target
            # initrd won't have working video output, makeing debugging
            # them harder.
            "nomodeset",
            "systemd.unit=stiefel-client.service",
            "stiefel_innercmdline=" + base64.b64encode(inner_cmdline).decode(),
        ])

        with open(os.path.join(tmpdir, 'syslinux.cfg'), 'w') as syslinuxcfg:
            syslinuxcfg.write(f"default kernel initrd=initrd {cmdline}\n")
    finally:
        command('umount', tmpdir)

os.sync()